Before beginning, please make sure that you have navigated to the ``examples/2_Standardize`` folder. This folder contains all the files necessary for the following examples. All examples discussed here are also included as a script in the ``example.py`` file. .. contents::   :local:###############Standardization###############Standardization is important to ensure that the ``Structures`` uphold specific properties. These properties are designed to make further analysis of molecules and molecular crystals easier.  Please be aware that standardization may change the order of atoms in the structures and may change their location in cartesian space. Standardization of every molecule or crystal structure is not required to make use of the analysis modules available in ``mcse``, although it may speed up the calculations or improve the results in certain cases. It's left to the users discretion if standardization is helpful for their specific analysis goals or if they prefer to keep the structure unstandardized. The process and details of standardization is discussed for `crystals`_ and `molecules`_ in the next sections. ^^^^^^^^Crystals^^^^^^^^For molecular crystals, standardization ensures that the molecules in the unit cell are not broken across the periodic boundary conditions and that the order of the atoms is consistent for each molecule in the geometry. In the future, this may also include adding any missing hydrogens to the molecules. Examples of standardizing a crystal structure is as follows. Notice that the atoms have been reordered based on the molecules and their chemical components. This will be discussed in more detail in the `molecules`_ standardization section. .. code-block:: python    >>> from mcse.io import read,write    >>> from mcse.crystals import standardize    >>> struct = read("PUBMUU02.cif")    >>> struct.elements    array(['H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',           'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'C', 'C',           'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',           'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'N', 'N', 'N', 'N',           'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N',           'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N',           'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N',           'N', 'N', 'N', 'N', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O',           'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O',           'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O',           'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O',           'O'], dtype='<U1')    >>> standardize(struct)    >>> struct.elements    array(['O', 'N', 'O', 'N', 'C', 'H', 'N', 'N', 'O', 'O', 'C', 'H', 'C',           'H', 'N', 'N', 'O', 'O', 'C', 'H', 'N', 'N', 'O', 'O', 'C', 'H',           'N', 'N', 'O', 'O', 'C', 'H', 'N', 'N', 'O', 'O', 'O', 'N', 'O',           'N', 'C', 'H', 'N', 'N', 'O', 'O', 'C', 'H', 'C', 'H', 'N', 'N',           'O', 'O', 'C', 'H', 'N', 'N', 'O', 'O', 'C', 'H', 'N', 'N', 'O',           'O', 'C', 'H', 'N', 'N', 'O', 'O', 'O', 'N', 'O', 'N', 'C', 'H',           'N', 'N', 'O', 'O', 'C', 'H', 'C', 'H', 'N', 'N', 'O', 'O', 'C',           'H', 'N', 'N', 'O', 'O', 'C', 'H', 'N', 'N', 'O', 'O', 'C', 'H',           'N', 'N', 'O', 'O', 'O', 'N', 'O', 'N', 'C', 'H', 'N', 'N', 'O',           'O', 'C', 'H', 'C', 'H', 'N', 'N', 'O', 'O', 'C', 'H', 'N', 'N',           'O', 'O', 'C', 'H', 'N', 'N', 'O', 'O', 'C', 'H', 'N', 'N', 'O',           'O'], dtype='<U32')Standardization is accomplished by the ``mcse.crystals.FindMolecules`` analysis *Driver*. Analysis *Drivers* are discussed in more detail in the next examples folder. The ``FindMolecules`` *Driver* may have other useful features for the user. An example of using the ``FindMolecules`` directly is as follows. .. code-block:: python    >>> from mcse.io import read,write    >>> from mcse.crystals import FindMolecules    >>> struct = read("BENZEN.cif")    >>> fm = FindMolecules()    >>> fm.calc(struct)    >>> fm.molecules    {'BENZEN_Molecule_0': BENZEN_Molecule_0: Molecule {'C': 6, 'H': 6},     'BENZEN_Molecule_1': BENZEN_Molecule_1: Molecule {'C': 6, 'H': 6},     'BENZEN_Molecule_2': BENZEN_Molecule_2: Molecule {'C': 6, 'H': 6},     'BENZEN_Molecule_3': BENZEN_Molecule_3: Molecule {'C': 6, 'H': 6}}    >>> fm.unique    {'BENZEN_Molecule_0': BENZEN_Molecule_0: Molecule {'C': 6, 'H': 6}}    >>> fm.translate    array([[-7.44,  0.  , -6.92],           [ 0.  , -9.55, -0.  ],           [ 0.  ,  0.  ,  0.  ],           [ 0.  ,  0.  ,  0.  ],    ...    Stored in ``FindMolecules`` after calling ``fm.calc`` are the molecules found in the crystal structure. It's guaranteed that these molecules are whole and not fragmented due to the periodic boundary conditions. Stored in ``fm.unique`` are the unique molecules in the unit cell. ``fm.translate``, are the translations for each atom in the geometry, by exact lattice vectors, that should be used to repair covalent bonds that were broken across the unit cell. ^^^^^^^^^Molecules^^^^^^^^^Performing standardization of molecules moves the center of mass (com) of the molecule to the origin, rotates the molecule such that its principal axes are aligned with the origin, and re-orders that atoms in the molecule using a heuristic graph algorithm. The re-ordering algorithm provides a unique atomic order for the molecule. The following example for the molecule, RDX, demonstrates how standardization changes the com, the orientation, and the atom ordering. It's important to note that molecule standardization should not occur for every molecule encountered during analysis. If any of the properties, location, orientation, or atom order, are important for the user's analysis, standardization should not be used. .. code-block:: python     >>> from mcse import com    >>> from mcse.io import read,write    >>> from mcse.molecules.standardize import standardize as standardize_mol    >>> from mcse.molecules import get_principal_axes    >>> mol = read("rdx.xyz")    >>> mol.elements    array(['H', 'H', 'H', 'H', 'H', 'H', 'C', 'C', 'C', 'C', 'C', 'C', 'N',           'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'O', 'O',           'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O', 'O'], dtype='<U1')    >>> com(mol)    array([3.9699969 , 7.9790079 , 8.96879887])    >>> get_principal_axes(mol)    array([[-0.70813616,  0.65273022, -0.26923305],           [ 0.63173412,  0.41539954, -0.65448852],           [-0.31536515, -0.63355069, -0.70651139]])    >>> standardize_mol(mol)    >>> mol.elements    array(['O', 'N', 'O', 'N', 'C', 'H', 'N', 'N', 'O', 'O', 'C', 'H', 'C',           'H', 'N', 'N', 'O', 'O', 'C', 'H', 'N', 'N', 'O', 'O', 'C', 'H',           'N', 'N', 'O', 'O', 'C', 'H', 'N', 'N', 'O', 'O'], dtype='<U1')    >>> com(mol)    array([0., 0., 0.])    >>> get_principle_axes(mol)    array([[1., 0., 0.],           [0., 1., 0.],           [0., 0., 1.]])             