Before beginning, please make sure that you have navigated to the ``examples/1_Introduction`` folder. This folder contains all the files necessary for the following examples. All examples discussed here are also included as a script in the ``example.py`` file. .. contents::   :local:   ############Introduction############This example folder covers the core components of the ``mcse`` library.1. ``mcse.io``: For reading and writing files and directories of structures2. ``mcse.Structure``: The geometry object that holds useful meta-data such as the bonds of the geometry and any other user-defined properties^^IO^^The input and output capabilities works for both files and directories of structures. ``mcse`` will automatically detect the correct method for reading using the file extension. Users may also explicity define the file format. The following example reads a ``CIF`` of a crystal structure and a ``xyz`` of a molecule using ``mcse.io.read`` and then writes new files. The crystal is written as a ``json`` file, which is native to the ``mcse`` library, and the molecule is written as an ``xyz`` file, to demonstrate how specific file formats can be specified. Note that file extensions are automatically added to the file name by ``mcse`` for the user's convenience. .. code-block:: python        >>> from mcse.io import read,write     >>> crystal = read("BENZEN.cif")    >>> molecule = read("benzene.xyz")    >>> crystal    BENZEN: Crystal {'C': 24, 'H': 24}    >>> molecule    benzene: Molecule {'C': 6, 'H': 6}    >>> write("BENZEN", crystal)    >>> write("molecule", molecule, file_format="xyz")    If the user tries to overwrite either of these files again, an error will be given. To overwrite files, the argument ``overwrite=True`` must be specified... code-block:: python    >>> write("BENZEN", crystal)    Exception: Filepath BENZEN.json already exists. If you want to overwite, use overwrite=True    >>> write("BENZEN", crystal, overwrite=True)        The following example is for reading and writing a directory of structures. Notice that the API is exactly the same as for IO of a single file. In addition, notice that the folder contains a heterogenous mixture of both crystals and molecules all stored in different file formats but the IO still works The following example is for reading and writing a directory of structures. Notice that the API is exactly the same as for IO of a single file. Notice that the IO works seemlessly even when the folder contains a heterogeneous mixture of both crystals and molecules all stored in different file formats... code-block:: python    >>> struct_dict = read("Example_Structures")    >>> struct_dict    {'benzene': benzene: Molecule {'C': 6, 'H': 6},     'BENZEN': BENZEN: Crystal {'C': 24, 'H': 24},     'rdx': rdx: Molecule {'C': 3, 'H': 6, 'N': 6, 'O': 6},     'cl20': cl20: Molecule {'C': 6, 'H': 6, 'N': 12, 'O': 12},     'PUBMUU02': PUBMUU02: Crystal {'C': 24, 'H': 24, 'N': 48, 'O': 48},     'CTMTNA15': CTMTNA15: Crystal {'C': 24, 'H': 48, 'N': 48, 'O': 48}}     >>> write("Structure_Directory", struct_dict)^^^^^^^^^Structure^^^^^^^^^The ``Structure`` class is made up of six key components. These are:1. ``Structure.geometry``: Holds the cartesian coordinates of the atoms2. ``Structure.elements``: Holds the elements of each atom respectively as a string3. ``Structure.lattice``: Optional lattice vectors of the geometry as a (3,3) array where each **row** is a single lattice vector4. ``Structure.bonds``: A list of indices for each atom in the geometry that describes the atom's covalent bonds to other atoms and if no bonds are provided, they will be computed automatically5. ``Structure.struct_id``: A unique identifier for the geometry and if none is provided an id is automatically created6. ``Structure.properties``: A dictionary of key,value pairs that holds any and all meta-data for the geometry The following examples will demonstrate many common interactions with the ``Structure`` class. In this first example, it's demonstrated that a dictionary of molecules that make up a given structure can be easily obtained through the ``Structure.molecules`` property. .. code-block:: python    >>> from mcse.io import read,write     >>> from mcse.crystals import standardize    >>> struct = read("BENZEN.cif")    >>> struct.geometry    array([[7.016664, 1.324585, 6.882632],           [4.143336, 8.225415, 3.422632],           [3.296664, 3.450415, 0.037368],            ...    >>> struct.elements    array(['C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',    'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H',    'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',    'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'], dtype='<U1')    >>> struct.molecules    {'BENZEN_Molecule_0': BENZEN_Molecule_0: Molecule {'C': 6, 'H': 6},     'BENZEN_Molecule_1': BENZEN_Molecule_1: Molecule {'C': 6, 'H': 6},     'BENZEN_Molecule_2': BENZEN_Molecule_2: Molecule {'C': 6, 'H': 6},     'BENZEN_Molecule_3': BENZEN_Molecule_3: Molecule {'C': 6, 'H': 6}}   However, it's not always the case that the molecules will be fully connected inside the unit cell. To ensure that the molecules are whole, ``mcse.crystals.standardize`` must be used. As shown below, before ``standardize`` the molecules found in the unit cell are disconnected in cartesian space. After ``standardize``, the molecules are fully connected... code-block:: python    >>> struct.molecules["BENZEN_Molecule_0"].molecules    {'BENZEN_Molecule_0_Molecule_0': BENZEN_Molecule_0_Molecule_0: Molecule {'C': 1, 'H': 1},     'BENZEN_Molecule_0_Molecule_1': BENZEN_Molecule_0_Molecule_1: Molecule {'C': 1, 'H': 1},     'BENZEN_Molecule_0_Molecule_2': BENZEN_Molecule_0_Molecule_2: Molecule {'C': 1, 'H': 1},     'BENZEN_Molecule_0_Molecule_3': BENZEN_Molecule_0_Molecule_3: Molecule {'C': 1, 'H': 1},     'BENZEN_Molecule_0_Molecule_4': BENZEN_Molecule_0_Molecule_4: Molecule {'C': 1, 'H': 1},     'BENZEN_Molecule_0_Molecule_5': BENZEN_Molecule_0_Molecule_5: Molecule {'C': 1, 'H': 1}}    >>> standardize(struct)    >>> struct.molecules["BENZEN_Molecule_0"].molecules    {'BENZEN_Molecule_0_Molecule_0': BENZEN_Molecule_0_Molecule_0: Molecule {'C': 6, 'H': 6}}    >>> write("BENZENE_Molecules", struct.molecules) ^^^^^^^^^^^^^^^^^^^^^^^^^Get/From ASE and Pymatgen^^^^^^^^^^^^^^^^^^^^^^^^^The next examples shows the different methods by which a ``mcse.Structure`` can be created. These include being transformed in memory from a ``ase.Atoms`` and a ``pymatgen.Structure``. Please note that the conversion is light and will not preserve meta-data stored in the ``ase.Atoms`` or ``pymatgen.Structure`` objects.------------Get/From Ase------------.. code-block:: python    >>> from mcse import Structure    >>> from ase import Atoms     >>> h2_atoms = Atoms('H2',positions=[[0, 0, 0],[0, 0, 0.7]])    >>> h2_atoms    Atoms(symbols='H2', pbc=False)    >>> h2_mcse = Structure.from_ase(h2_atoms)    >>> h2_mcse    Molecule_H2_20210518_5tgqbf5gca: Molecule {'H': 2}    >>> h2_mcse.get_ase_atoms()    Atoms(symbols='H2', pbc=False)    -----------------Get/From Pymatgen-----------------.. code-block:: python        >>> from mcse import Structure    >>> import pymatgen.core as pmg    >>> lattice = pmg.Lattice.cubic(4.2)    >>> cscl_pmg = pmg.Structure(lattice, ["Cs", "Cl"],[[0, 0, 0], [0.5, 0.5, 0.5]])    >>> cscl_pmg    Structure Summary    Lattice        abc : 4.2 4.2 4.2     angles : 90.0 90.0 90.0     volume : 74.08800000000001          A : 4.2 0.0 0.0          B : 0.0 4.2 0.0          C : 0.0 0.0 4.2    PeriodicSite: Cs (0.0000, 0.0000, 0.0000) [0.0000, 0.0000, 0.0000]    PeriodicSite: Cl (2.1000, 2.1000, 2.1000) [0.5000, 0.5000, 0.5000]    >>> cscl_mcse = Structure.from_pymatgen(cscl_pmg)    >>> cscl_mcse    Structure_ClCs_20210519_nxtb90d13f: Crystal {'Cl': 1, 'Cs': 1}    >>> cscl_mcse.get_pymatgen_structure()    Structure Summary    Lattice        abc : 4.2 4.2 4.2     angles : 90.0 90.0 90.0     volume : 74.08800000000001          A : 4.2 0.0 0.0          B : 0.0 4.2 0.0          C : 0.0 0.0 4.2    PeriodicSite: Cs (0.0000, 0.0000, 0.0000) [0.0000, 0.0000, 0.0000]    PeriodicSite: Cl (2.1000, 2.1000, 2.1000) [0.5000, 0.5000, 0.5000]        