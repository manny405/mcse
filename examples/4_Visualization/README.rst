Before beginning, please make sure you have have navigated to the ``examples/4_Visualization`` folder. This folder contains all the files necessary for the following examples. All examples discussed here are also included as a script in the ``render.py`` file. .. contents::   :local:#############Visualization#############Included in ``mcse`` is its own visualization and rendering implementation for molecules and molecular crystals. The integration of a rendering engine affords many opportunities to improve the speed by which visual analysis can be performed. Specific examples include automated image rendering and the development of new visualization techniques. Atomic geometry rendering is implemented with the Visualization Toolkit (VTK_) using its Python bindings. All aspects of the rendering can be changed by the user including the resolution of the image, the van der Waals size of the atoms, the radius of the covalent bonds, the number of inter-molecular interactions drawn, the element colors, and individual atom colors. The rendering has been setup in such a way that the molecule or crystal will be exactly touching the edge of the rendered window. This means that no cropping should be required by the user when automatically rending images of atomic structures using ``mcse``.Rendering is performed by the ``mcse.Render`` class and associated classes for specific implementations for molecules and crystals. These provide different default viewing angles that are optimized for their specific use cases. The most important user options available when initializing the ``mcse.Render`` class are described below. * ``dpa``: int    Resolution setting of the renderer in units of dots per angstrom. For quickly rendering images, a recommended value is between 50 and 100 depending on the number of atoms in the geometry. A value of 400 should be used for high quality images. * ``vdw``: float    Coefficient multiplied by the van der Waals radii used when rendering the atomic spheres.* ``interactive``: bool    If True, the render will produce a window where the user may interact with the scene. If False, the render is performed *headless*. This means rendering is still performed but it takes place offscreen. * ``lattice_vector_label_size``: float    The fontsize of the lattice vector labels.    The most import methods of the ``mcse.Render`` class are as follows.* ``Render.calc(Structure)``:     This method performs the rendering for the given geometry. If ``interactive`` is turned on, then a window will open for the user displaying the rendered geometry. * ``Render.write(folder)``:    The ``write`` method must be called after ``calc``. The ``write`` method will save the rendered scene as an image in the given folder. The image name will be determined based on the structure's ``struct_id``. The resolution of the image is determined based on the ``dpa`` argument that is provided during initialization.         If interactive rendering is used, the user may adjust the viewing angle of the geometry manually. Then, after closing the window, ``Render.write`` will save an image identical to what was last seen by the user. This is a convenient way for users to get exactly the viewing angle they desire.         .. _VTK: https://vtk.org/^^^^^^^^^Molecules^^^^^^^^^Provided are examples using the three different ``Render`` classes for non-periodic geometries. Each provides a different calculated viewing angle for the molecules. This is example is also available in the ``render.py`` file using ``interactive=False``. This example may be run using this file and the user may quickly analyze the differences from the images that are saved. .. code-block:: Python    >>> from mcse.io import read,write    >>> from mcse.molecules.render import AlignedRender    >>> struct_dict = read("Example_Structures")    >>> interactive = True    >>> dpa = 100        ### AlignedRender aligns molecule's principal axis with the origin and     ### then tilts the molecule slightly    >>> ar = AlignedRender(dpa=dpa, interactive=interactive)    >>> ar.calc(struct_dict["cl20"])    >>> ar.write("Aligned_Images")    >>> ar.calc(struct_dict["benzene"])    >>> ar.write("Aligned_Images")        ### Use viewing angle that maximizes visible area of molecule    >>> ar = AreaMaximizedRender(dpa=dpa, interactive=interactive)    >>> ar.calc(struct_dict["cl20"])    >>> ar.write("Area_Maximized_Render")    >>> ar.calc(struct_dict["benzene"])    >>> ar.write("Area_Maximized_Render")    ### Use viewing angle that minmizes visible area of molecule    >>> ar = AreaMinimizedRender(dpa=dpa, interactive=interactive)    >>> ar.calc(struct_dict["cl20"])    >>> ar.write("Area_Minimized_Render")    >>> ar.calc(struct_dict["benzene"])    >>> ar.write("Area_Minimized_Render")Examples for the three different molecule ``Render`` classes. .. figure:: static/Benzene_Examples.png    :height: 628    :width: 1659    :scale: 35 %    :align: center^^^^^^^^Crystals^^^^^^^^There are three different ``Render`` classes available for crystal geometries. Examples of these are provided below for TATB and DATB. This code is taken from ``render.py``. .. code-block:: Python        from mcse.io import read,write    from mcse.crystals.render import AlignedRender,SupercellRender,MotifRender    from mcse.crystals import standardize        struct_dict = read("Example_Structures")       interactive = False    dpa = 50    supercell_mult=(2,2,2)        standardize(struct_dict["TATNBZ"])    standardize(struct_dict["DATNBZ01"])        ### Standard viewing angle for crystal is the (1,1,0) direction    ar = AlignedRender(dpa=dpa, interactive=interactive)    ar.calc(struct_dict["TATNBZ"])    ar.write("Aligned_Crystal_Images")    ar.calc(struct_dict["DATNBZ01"])    ar.write("Aligned_Crystal_Images")        ### Visualization for (2,2,2) supercell    ar = SupercellRender(dpa=dpa, supercell_mult=supercell_mult, interactive=interactive)    ar.calc(struct_dict["TATNBZ"])    ar.write("Supercell_Images")    ar.calc(struct_dict["DATNBZ01"])    ar.write("Supercell_Images")                                                       ### Viewing angle is calculated from supercell for visualization of the     ### motif of the crystal    ar = MotifRender(dpa=dpa, supercell_mult=supercell_mult, interactive=interactive)    ar.calc(struct_dict["TATNBZ"])    ar.write("Motif_Images")    ar.calc(struct_dict["DATNBZ01"])    ar.write("Motif_Images")          .. figure:: static/Crystal_Render_Examples.png    :height: 1802    :width: 3581    :scale: 20 %    :align: center    ^^^^RMSD^^^^The method for calculating the root-mean-square difference between molecule crystal structures in ``mcse`` was described in the ``3_Analysis_Driver`` folder. A rendering method has been included to produce high quality images of the overlapping molecular clusters that are found using the ``mcse`` RMSD method. An example of this is given below, with the code taken from ``render.py``. .. code-block:: Python    from mcse.crystals import RMSD    from mcse.molecules.render import OverlappingClusters        dpa = 50    interactive = True        rmsd = RMSD(nn=12, search_nn=16)    struct_dict = read("RMSD_Example_Structures")    oc = OverlappingClusters(dpa=dpa, interactive=interactive)        rmsd.calc_struct(struct_dict["3ddf4a302a"], struct_dict["8aeae1272d"])    oc.calc_struct(rmsd.overlapping_clusters)    oc.write("RMSD_Images")        rmsd.calc_struct(struct_dict["3ddf4a302a"], struct_dict["fafdb8075b"])    oc.calc_struct(rmsd.overlapping_clusters)    oc.write("RMSD_Images")        oc.matplotlib_colorbar(ax=ax)In the figure below, the target cluster is displayed using atom and bond colorings that correspond to the element. Each molecule from the candidate cluster is colored according to its RMSD. In the figure on the left, it's clear that the two structures are nominally identical. The figure on the right demonstrates significant differences reflected by the cluster mismatch and bright molecule colors.     .. figure:: static/RMSD_Render.png    :height: 1766    :width: 3545    :scale: 20 %    :align: center